        $$$$$$$$$$$$
            INFO

All routes stats with - /api/
{} - means group of values for better view and doesnt affect on sending data
If {} plased with some word that means json object with some parametrs

        $$$$$$$$$$$$




############## Common routes ##############

Route - /login
Method - POST
Auth needed - no 
Values: 
    email
    password
Response: 
     _id
    username
    role
    emailConfirm
    token


Route - /registration
Method - POST
Auth needed - no
Values: 
    username 
    email
    password
Response: 
    _id
    username
    email
    token

      
Route - /emailAuth
Method - POST
Auth needed - no
Values: 
    id
Response: 
    "User not found"
    or
    err: err.message
    or
    "Email confirmed"


Route - /sendRecoveryEmail
Method - POST
Auth needed - no
Values: 
    userID
Response: 
    message: "success" 


Route - /recoveryPassword
Method - POST
Auth needed - no
Values: 
    userID
    newPassword
Response: 
    err: error.message 
    or
    err: "Link has expired"
    or
    message: "success"


############## User routes ##############

Route - /userData
Method - GET
Auth needed - yes
Values: 
    username (ник пользователя)
Response: 
      username: user.username,
      email: user.email,
      name: user.name,
      role: user.role,
      preferredRole: user.preferredRole,
      info: user.info,
      image: user.image,
      projects: projects,


Route - /lightUserData
Method - GET
Auth needed - yes
Values: 
    username (ник пользователя)
Response: 
      username
      role
      image


Route - /updateUser
Method - POST
Auth needed - yes
Values: 
    userToUpdate (ник пользователя)
    "newData": {   (новые данные пользователя, данные ниже изменяются при передаче значений)
        username
        email
        password
        preferredRole
        name
        role
        info
    }
Response: 
    message: "updated"


Route - /deleteUser
Method - POST
Auth needed - yes
Values: 
    username (ник пользователя)
Response: 
    message: "deleted"


Route - /getUsers
Method - GET
Auth needed - yes
Values: 
    none
Response: 
    result (список всех пользователей исключая супер админа)
    



############## Project routes ##############

Route - /createProject
Method - POST
Auth needed - yes
Values: 
    creatorid, //required
    creatorUsername,
    managerid,
    creatorUsername,
    needHelp,
    projectTitle, // required
    projectDescription,
    projectSubject,
    filename,
    membersCount,
    Date(),
    Date(req.body.endGathering), // required
    Date(req.body.endProject), // required
    requredRoles,
    projectMembers,
    requests,
Response: 
    project: newProject
    prChat: newProjectChat


Route - /projectData
Method - POST
Auth needed - no
Values: 
    projectSlug
Response: 
    project (полностью мнформация о проекте)


Route - /updateProject
Method - POST
Auth needed - yes
Values: 
    projectSlug
    managerID,
    managerName, 
    projectTitle,
    projectDescription,
    projectSubject,
    filename,
    membersCount,
    endGathering,
    endProject,
    requredRoles,
    projectMembers,
    archive, 
    needHelp, 
    needChanges, 
Response: 
    message: "updated"


Route - /deleteProject
Method - POST
Auth needed - yes
Values: 
    projectSlug
Response: 
    responce: {
        projectStatus,
        todoListStatus
    }


Route - /getProjects
Method - GET
Auth needed - no
Values: 
    none
Response: 
    projects (массив проектов)


Route - /getArchivedProjects
Method - GET
Auth needed - no
Values: 
    none
Response: 
    projects


Route - /addProjectMember
Method - POST
Auth needed - yes
Values: 
    projectSlug
    role
    id (request id)
    roleID
    name; // optional
    count; // optional
    alreadyEnter; // optional
Response: 
    message: "success",
    exeptionReqRole: exeptionReqRole,
    exeptionPullRequests: exeptionPullRequests,


Route - /deleteProjectMember
Method - POST
Auth needed - yes
Values: 
    projectSlug
    memberID
    roleID
    {   (для изменения требуемых ролей)
        name; // optional
        count; // optional
        alreadyEnter; // optional
    }
Response: 
    message: "success", 
    exeption: exeption


Route - /addRequest
Method - POST
Auth needed - yes
Values: 
    projectSlug
    { (данные нового запроса)
        username;
        role;
    }
Response: 
     message: "success"

Route - /deleteRequest
Method - POST
Auth needed - yes
Values: 
    projectSlug
    requestID
Response: 
    message: "success", 
    exeption: exeption



############## Chat ##############

$$$$$$$$$$$
{} means json object
$$$$$$$$$$$



Theme - joinRoom
Values: 
    { username, token, room }
Response:  
    io.to(cUser.id).emit("err", { err: });
    or 
    io.to(chat.chatRoom).emit("message", {
          status: CONNECTED,
          user: cUser.username,
        });


Theme - chatMessage
Values: 
    text (json object)
Response:  
    io.to(cUser.id).emit("err", {
            err: 
          });
    or
    io.to(chat.chatRoom).emit("message", text);


Theme - getUsersInChat
Values: 
    chat (json object {slug})
    or
    project (json object {slug})
Response:  
    io.to(cUser.id).emit("err", {
            err: 
          });
    or
    io.to(cUser.id).emit("usersInChat", list);


Theme - getHistory
Values: 
    { username, page }
Response:  
    io.to(cUser.id).emit("err", { err: });
    or 
    io.to(cUser.id).emit("history", {history: messagesHistory});


Theme - blockUser
Values: 
    {userID}
Response:  
    io.to(cUser.id).emit("err", { err:  });
    or 
    io.to(chat.chatRoom).emit("userBlocked", {
          text: "User " + user.username + " are blocked",
        });


Theme - unblockUser
Values: 
    {userID}
Response:  
    io.to(cUser.id).emit("err", { err:  });
    or 
    io.to(chat.chatRoom).emit("userUnblocked", {
          text: "User " + user.username + " are unblocked",
        });


Theme - leave
Values: 
    {userID}
Response:  
    io.to(cUser.id).emit("err", { err: });
    or 
    io.to(caht.chatRoom).emit("userLeave", {
          status: DISCONNECTED,
          username: cUser.username,
        });

############## Task Lists ##############

Theme -  get-TaskList
Values: 
    { username, token, slug }
Response:  
    io.to(user.id).emit("err", { err: });
    or
    io.to(user.id).emit("listData", { list });


Theme -  create-board
Values: 
    { crtBoard }
Response:   
    io.to(user.id).emit("err", { err: });
    or 
    io.to(user.id).emit("created-board", {
            status: "success",
            board: newBoard,
          });


Theme -  update-board
Values: 
    { updBoard }
Response:   
    io.to(user.id).emit("err", { err: });
    or 
    io.to(user.id).emit("updated-board", {
            status: success,
            board: board,
          });


Theme -  delete-board
Values: 
    { delBoard }
Response:   
    io.to(user.id).emit("err", { err: err.message });
    or
    io.to(user.id).emit("deleted-board", { status: "success" });


Theme -  create-task
Values: 
    { board, crtTask }
Response:   
    io.to(user.id).emit("err", { err: });
    or 
    io.to(user.id).emit("created-task", { status: "success" });



############## Report user routes ##############

Route - /createUserReport
Method - POST
Auth needed - yes 
Values: 
    reportFrom,
    username
Response: 
    message: "reportFrom are required"
    or
    message: "Report already exist"
    or
    message: "success"


Route - /getReportedUsers
Method - GET
Auth needed - yes
Values: 
    none
Response: 
    err: err.message
    or
    result (массив зарепорченных пользователей)


Route - /deleteUserReport
Method - POST
Auth needed - yes 
Values: 
    reportID
Response: 
    err: "field (reportID) are required"
    or
    err: err.message
    or
    message: "deleted"



############## Report projects routes ##############

Route - /createProjectReport
Method - POST
Auth needed - yes 
Values: 
    reportFrom
    title
Response: 
    message: "reportFrom are required"
    or
    err: err.message
    or
    message: "Report already exist"
    or
    message: "success"


Route - /getReportedProjects
Method - GET
Auth needed - yes
Values: 
    none
Response: 
    err: err.message
    or
    result (массив зарепорченых проектов)


Route - /deleteUserReport
Method - POST
Auth needed - yes
Values: 
    reportID
Response: 
    err: "field (reportID) are required"
    or
    err: err.message 
    or
    message: "deleted"



############## Chat routes ##############

Route - /createChat
Method - POST
Auth needed - yes
Values: 
   chatRoom
   chatMembers
Response: 
    err: err.message
    or
    err: "Chat already exist"
    or
    chat: newChat 


Route - /getChats
Method - GET
Auth needed - yes
Values: 
   username 
Response: 
    err: err.message
    or
    err: "No chat with this user"
    or
    chats: userChats


Route - /deleteChat
Method - POST
Auth needed - yes
Values: 
   chatRoom
Response: 
    err: err.message
    or
    err: "Chat not found"
    or
    message: "success"



############## Image routes ##############


Route - /saveFile
Method - GET
Auth needed - yes
Values: 
   req.query.filename
   req.query.userID
   req.query.contentType 
   в bindle картинку
Response: 
   status: "saved",
   imageName: filenameSlug,


Route - /getFile
Method - POST
Auth needed - yes
Values: 
   req.body.filename
Response: 
    картинка
